#!/bin/bash
set -o errexit
set -o nounset
set -o pipefail

NODEUP_URL_AMD64=https://artifacts.k8s.io/binaries/kops/1.32.0/linux/amd64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.32.0/nodeup-linux-amd64
NODEUP_HASH_AMD64=49ee0c56cd6005a47f0c5df9b23e142e106441d101f5e09cd7f4aa76a8d3806b
NODEUP_URL_ARM64=https://artifacts.k8s.io/binaries/kops/1.32.0/linux/arm64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.32.0/nodeup-linux-arm64
NODEUP_HASH_ARM64=460bf1b2d2d7b9e134212622b2588fd74fac3d17c8f1d5f21d77a1d3cf09177f

export AWS_REGION=us-east-1




sysctl -w net.core.rmem_max=16777216 || true
sysctl -w net.core.wmem_max=16777216 || true
sysctl -w net.ipv4.tcp_rmem='4096 87380 16777216' || true
sysctl -w net.ipv4.tcp_wmem='4096 87380 16777216' || true


function ensure-install-dir() {
  INSTALL_DIR="/opt/kops"
  # On ContainerOS, we install under /var/lib/toolbox; /opt is ro and noexec
  if [[ -d /var/lib/toolbox ]]; then
    INSTALL_DIR="/var/lib/toolbox/kops"
  fi
  mkdir -p ${INSTALL_DIR}/bin
  mkdir -p ${INSTALL_DIR}/conf
  cd ${INSTALL_DIR}
}

# Retry a download until we get it. args: name, sha, urls
download-or-bust() {
  echo "== Downloading $1 with hash $2 from $3 =="
  local -r file="$1"
  local -r hash="$2"
  local -a urls
  mapfile -t urls < <(split-commas "$3")

  if [[ -f "${file}" ]]; then
    if ! validate-hash "${file}" "${hash}"; then
      rm -f "${file}"
    else
      return 0
    fi
  fi

  while true; do
    for url in "${urls[@]}"; do
      commands=(
        "curl -f --compressed -Lo ${file} --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget --compression=auto -O ${file} --connect-timeout=20 --tries=6 --wait=10"
        "curl -f -Lo ${file} --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget -O ${file} --connect-timeout=20 --tries=6 --wait=10"
      )
      for cmd in "${commands[@]}"; do
        echo "== Downloading ${url} using ${cmd} =="
        if ! (${cmd} "${url}"); then
          echo "== Failed to download ${url} using ${cmd} =="
          continue
        fi
        if ! validate-hash "${file}" "${hash}"; then
          echo "== Failed to validate hash for ${url} =="
          rm -f "${file}"
        else
          echo "== Downloaded ${url} with hash ${hash} =="
          return 0
        fi
      done
    done

    echo "== All downloads failed; sleeping before retrying =="
    sleep 60
  done
}

validate-hash() {
  local -r file="$1"
  local -r expected="$2"
  local actual

  actual=$(sha256sum "${file}" | awk '{ print $1 }') || true
  if [[ "${actual}" != "${expected}" ]]; then
    echo "== File ${file} is corrupted; hash ${actual} doesn't match expected ${expected} =="
    return 1
  fi
}

function split-commas() {
  echo "$1" | tr "," "\n"
}

function download-release() {
  case "$(uname -m)" in
  x86_64*|i?86_64*|amd64*)
    NODEUP_URL="${NODEUP_URL_AMD64}"
    NODEUP_HASH="${NODEUP_HASH_AMD64}"
    ;;
  aarch64*|arm64*)
    NODEUP_URL="${NODEUP_URL_ARM64}"
    NODEUP_HASH="${NODEUP_HASH_ARM64}"
    ;;
  *)
    echo "Unsupported host arch: $(uname -m)" >&2
    exit 1
    ;;
  esac

  cd ${INSTALL_DIR}/bin
  download-or-bust nodeup "${NODEUP_HASH}" "${NODEUP_URL}"

  chmod +x nodeup

  echo "== Running nodeup =="
  # We can't run in the foreground because of https://github.com/docker/docker/issues/23793
  ( cd ${INSTALL_DIR}/bin; ./nodeup --install-systemd-unit --conf=${INSTALL_DIR}/conf/kube_env.yaml --v=8  )
}

####################################################################################

/bin/systemd-machine-id-setup || echo "== Failed to initialize the machine ID; ensure machine-id configured =="

echo "== nodeup node config starting =="
ensure-install-dir

cat > conf/kube_env.yaml << '__EOF_KUBE_ENV'
CloudProvider: aws
ClusterName: k8s.niteshnepali.com.np
ConfigServer:
  CACertificates: |
    -----BEGIN CERTIFICATE-----
    MIIC+DCCAeCgAwIBAgIMGEuarNEdmggd7kCnMA0GCSqGSIb3DQEBCwUAMBgxFjAU
    BgNVBAMTDWt1YmVybmV0ZXMtY2EwHhcNMjUwNjIxMDcxNTQ3WhcNMzUwNjIxMDcx
    NTQ3WjAYMRYwFAYDVQQDEw1rdWJlcm5ldGVzLWNhMIIBIjANBgkqhkiG9w0BAQEF
    AAOCAQ8AMIIBCgKCAQEAtDS+jaKC/XZKOXOSNgNwKphVujgAN0bjtfoVIDoGF+TA
    EMi3k4hNugOO23hBc3EetFzKwxLdm2cxk5i4/gYiwAZVi6QMXyxgtxXvKddoPBvD
    BrSj4zaR8J1ZHBdwJjyT4cxk1kOjLNAvgK/SkLHAuMstpW/8VREN28TOYDTUCbjO
    DAT1rRwvDpOTxf+I2afx4iG7sIKH56OchcowWG/OiKIZybV1J032A2V3rhU91dGP
    ujQM+TH0RnLXB/XptXNrDuAukzhyMVK9OwJNQhThsYBT2k8lwkeZB82AMgDtrjHz
    ZPK81cLz1PVVoojnojp3Hpb7WlmvXrdYb9PnaY5jAwIDAQABo0IwQDAOBgNVHQ8B
    Af8EBAMCAQYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUIRGOHUY7x818yIsw
    eJ1iiXF9AtcwDQYJKoZIhvcNAQELBQADggEBAAOwwR5OGsazT2egc1sJ3T324nVz
    9t4MVM+f1c+zadZizuR0EK5FfX9PwdA0tL/hN3M3Ocytf7yGwXoM0ahuujuScDSL
    9bPOe7hljXXSgWdl3/XEnNmQy0yC9n+UcNPxea5eEgRkt12aVfEMFWlisxmTxX9B
    YJXo4fXz6PwTZ0XbokZfX/Ky/tZowlVFgNgHlNfO8D10OBZMoXZX1JWnUYZoNsbW
    uj27iiOhB9f6jsuHokebQuTgikkJ8AKuLAPLK43XmVCUdAZ6KU6T2jjxyOX8WVC4
    SazTo9xNKRoAE8v5gLy4ChIbV46TbOwwryA8OMuZFNgNm/mZp4QfKMV5ZZ0=
    -----END CERTIFICATE-----
  servers:
  - https://kops-controller.internal.k8s.niteshnepali.com.np:3988/
InstanceGroupName: nodes-us-east-1a
InstanceGroupRole: Node
NodeupConfigHash: 1UaQNXsd/cgKr7EutoIw22IbhuaOUgMZF6N9/t88vn0=

__EOF_KUBE_ENV

download-release
echo "== nodeup node config done =="
